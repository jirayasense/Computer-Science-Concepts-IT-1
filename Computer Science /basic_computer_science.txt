* Imperative Programming :- use statement to mutate state
  
  Declrative programming :- use function to mutate state


* API

  URI : baseUrl -> path -> query Param
  Header : Authorization, request/response body info
  

  scheme_name:hierarchical_part?query#fragment

* Web-Sockets


* Terminologies (OOPS) 

  - Lambdas (Closure)


* Heap & Stack Importance :  (memory Management)
  -----------
   -> When you instantiate any object in OOPS 
      \
       memory is allocated on Heap
        & 
       reference is stored on stack in a variable (as Stack is tightly bound with CPU) 

* Memory Management :-
* Dynamic Memeory Allocation (DMA)
  ------
   -> At run time

  Continuous Memeory Allocation :
  -----------
   In c/c++ - yes 
   In Java - No (based on JVM) 

   => Heap objects are not continuous


* Casting vs Coercing :
  --------------
   -> https://stackoverflow.com/questions/8857763/what-is-the-difference-between-casting-and-coercing

      Coercing is same as Implicit-Conversion

* TimeStamps :
  -------
   EpoCh - GMT (Universal)
           Local 


* Reference Equality vs Value Equality :
  -------------


* StringBuilder or ArrayList or any dynamically sized List :
  --------------------
  -> dynamically sized string 
     -> Initial Capacity - then doubles - to max Capacity
        doubling happens at runtime when required 

        Once maxCapacity reached Exception is thrown


* Boxing/UnBoxing, Nullable, Optional

   ref : https://reneferrari.github.io/understand-boxing-in-kotlin

* Total Ordering :
  -----------
   1, 0, -1
   Lexiographical Ordering, Natural Ordering


* Object :
  -----
   -> hashcode() & equals()

-----------------------------

Algorithms

 1) Auxilary Space - (Extra Space)
 2) Amortize Complexity


-----------------------------